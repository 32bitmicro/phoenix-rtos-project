# vim:sw=2:ts=2
name: ci

# on events
on:
  push:
    branches:
      - master
      - 'feature/*'
  pull_request:
    branches:
      - master
      - 'feature/*'
      - jsarzy/cpptest

# jobs
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    outputs:
      build_result: ${{ steps.build.outcome }}
    strategy:
      matrix:
        #target: ['armv7a7-imx6ull-evk', 'armv7a9-zynq7000-qemu', 'armv7a9-zynq7000-zedboard', 'armv7a9-zynq7000-zturn', 'armv7m4-stm32l4x6-nucleo', 'armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk', 'host-generic-pc', 'ia32-generic-pc', 'ia32-generic-qemu', 'riscv64-generic-qemu', 'riscv64-generic-spike']
        target: ['ia32-generic-qemu', 'armv7a7-imx6ull-evk', 'armv7m7-imxrt106x-evk']
        include:
          - target: 'ia32-generic-qemu'
            syspage: 'psh pc-ata uart16550'
    steps:
      # step 1: checkout repository code inside the workspace directory of the runner
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # attach GCC problem matcher - will pin problems to files only in current submodule
      - uses: ammaraskar/gcc-problem-matcher@master

      # step 2: use our custom action to build the project
      - name: Build
        id: build
        uses: ./.github/actions/phoenix-build
        with:
          target: ${{ matrix.target }}
          syspage: ${{ matrix.syspage }}
          params: core fs test project image bear ${{ matrix.additional_params }}

      # step 3: tar rootfs
      - name: Tar rootfs
        working-directory: _fs
        run: tar -cvf ../rootfs-${{ matrix.target }}.tar ${{ matrix.target }}/root

      # step 4: upload project boot directory and tarball of rootfs as build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}
          path: |
            _boot/${{ matrix.target }}
            rootfs-${{ matrix.target }}.tar

      - name: Upload compile database artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compile-db-artifacts
          path: |
            _build/*/include
            _build/*/compile_commands.json

  cpptestcli:
    needs: build
    name: run cpptestcli 
    runs-on: parasoft

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download compile database artifacts
        uses: actions/download-artifact@v3
        with:
          name: compile-db-artifacts
          path: _build

      - name: Get changed and added files
        id: files
        run: scripts/ci/changed_files.sh ${{ github.event.before }} ${{ github.event.after }}

      - name: Run cpptestcli
        run: scripts/ci/parasoft_cpptestcli.py ${{ steps.files.outputs.added_files }} ${{ steps.files.outputs.modified_files }}

      - name: Upload cpptestcli results
        uses: actions/upload-artifact@v3
        with:
          name: cpptestcli-result
          path: reports/report.sarif

  test-emu:
    needs: build
    name: run tests on emulators
    runs-on: ubuntu-latest
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7a9-zynq7000-qemu', 'host-generic-pc', 'ia32-generic-qemu']

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        uses: ./.github/actions/phoenix-runner
        with:
          target: ${{ matrix.target }}

  test-hw:
    needs: build
    name: run tests on hardware
    runs-on: ${{ matrix.target }}
    outputs:
      runner_result: ${{ steps.runner.outcome }}
    strategy:
      matrix:
        target: ['armv7m7-imxrt106x-evk', 'armv7m7-imxrt117x-evk']

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: phoenix-rtos-${{ matrix.target }}

      - name: Untar rootfs
        working-directory: _fs
        run: tar -xvf ../rootfs-${{ matrix.target }}.tar

      - name: Test runner
        id: runner
        run: |
          python3 ./phoenix-rtos-tests/runner.py -T${{ matrix.target }}

#  mail-notification:
#    if: ${{ failure() }}
#    needs: ['build', 'test-emu', 'test-hw']
#    name: notify ci team using e-mail
#    runs-on: ubuntu-latest
#    steps:
#      - name: Send mail
#        # If there is some failure, not caused by build step or test runner step send mail
#        if: >-
#          ${{ needs.build.outputs.build_result != 'failure'
#          && needs.test-emu.outputs.runner_result != 'failure'
#          && needs.test-hw.outputs.runner_result != 'failure' }}
#        uses: dawidd6/action-send-mail@v3
#        with:
#          server_address: smtp.gmail.com
#          server_port: 465
#          username: ${{ secrets.CI_BOT_EMAIL_USERNAME }}
#          password: ${{ secrets.CI_BOT_EMAIL_PASSWORD }}
#          subject: Github Actions Warning
#          to: ci@phoenix-rtos.com
#          # Required sender full name (address can be skipped):
#          from: Continuous Integration Bot
#          # Optional whether this connection use TLS (default is true if server_port is 465)
#          secure: true
#          body: There is some problem with GH Actions. https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
